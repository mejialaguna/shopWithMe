generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Country {
  id           String         @id
  name         String
  UserAddress  UserAddress[]
  orderAddress orderAddress[]
}

model UserAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  zipcode   String
  phone     String
  city      String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  // relation one to one
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // ** relationship with the between Category and Product table
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // ** relationship with the between Product and Category table
  // ** here i am adding a relation to the Category model using the "categoryId" from the Product model and the "id" from the Category model.
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // ** relationship with the between Product and ProductImage table
  ProductImage ProductImage[]
  // ** relationship with the between Product and orderItems table
  orderItems   orderItems[]

  // ** with this index, i can look up all of the products of men, kid, women or unisex.
  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  // ** relationship with the between ProductImage and Product table
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  // relation one to one
  address UserAddress?
  Order   Order[]
}

model Order {
  id           String    @id @default(uuid())
  subtotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  IsPaid       Boolean @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ** relationship with between this table and user table
  userId       String
  user         User           @relation(fields: [userId], references: [id])

  orderItems   orderItems[]
  orderAddress orderAddress?

  transactionId String?
}

model orderItems {
  id        String @id @default(uuid())
  quantity  Int
  price     Float
  size      Size

  orderId   String
  order   Order   @relation(fields: [orderId], references: [id])

  productId String
  product Product @relation(fields: [productId], references: [id])
}

model orderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  zipcode   String
  phone     String
  city      String

  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String @unique
}
